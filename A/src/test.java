/* Generated By:JavaCC: Do not edit this line. test.java */
import nodes.*;
public class test implements testConstants {
public static void main (String [] args)
{
try{
test parser = new test(System.in);
treeNode n = parser.start();
n.execute();
}
catch(Exception e){System.out.print(e.getMessage());}
}

  static void error_skipto(int kind) throws ParseException {
 ParseException e = generateParseException(); // generate the exception object. 
System.out.println("error"); // print the error message 
Token t;
do { t = getNextToken(); } while (t.kind != kind);
  }

  static final public treeNode start() throws ParseException {
  stringNode s;
blockNode w;
ExeFunc ew;
FuncNode f;
CheckFun c;
assignNode a;
    w = EveryThing();
 {if (true) return w;}
    throw new Error("Missing return statement in function");
  }

  static final public ExeFunc FunEx() throws ParseException {
 ExeFunc e;
 CheckFun c;
 Token t1;
    t1 = jj_consume_token(CHAR);
        c=new CheckFun(t1.toString());
        e=new ExeFunc(c);
        {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public FuncNode FuncSt() throws ParseException {
  FuncNode f;
  stringNode w1,w2;
  Token t1,t2;
  blockNode b;
        String q="";
    jj_consume_token(FUNCTION);
    t1 = jj_consume_token(CHAR);
    jj_consume_token(OPEN1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t2 = jj_consume_token(CHAR);
                                    q+=t2.toString();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(34);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = jj_consume_token(CHAR);
                                          q+=","+t2.toString();
    }
    jj_consume_token(C2);
    jj_consume_token(OPEN);
    b = EveryThing();
    jj_consume_token(C1);
  w1=new stringNode(t1.toString());
w2=new stringNode(q.toString());
f=new FuncNode (w1,w2,b);
     {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  static final public blockNode EveryThing() throws ParseException {
  treeNode n;
blockNode w=new blockNode();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SWITCH:
        n = SwitchSt();
        break;
      case STRING:
      case INT:
        n = AssingSt();
        break;
      case CHAR:
        n = IncSt();
        break;
      case WHILE:
        n = WhileSt();
        break;
      case DO:
        n = doWhileSt();
        break;
      case IF:
        n = IfSt();
        break;
      case CW:
        n = print();
        break;
      case FOR:
        n = ForSt();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
           w.addChild(n);
      if (jj_2_1(5)) {
        ;
      } else {
        break label_2;
      }
    }
  {if (true) return w;}
    throw new Error("Missing return statement in function");
  }

  static final public SwitchNode SwitchSt() throws ParseException {
  SwitchNode s=new SwitchNode();
        ChechVal ss;
        stringNode str;
        constNode v2;
        blockNode b=new blockNode();
        stNode st=new stNode();
        Token t1,t2,t4=null;
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(OPEN1);
      t1 = jj_consume_token(CHAR);
      jj_consume_token(C2);
ss=new ChechVal(t1.toString());
   s.addChild(ss);
      jj_consume_token(OPEN);
      if (jj_2_2(2)) {
        label_3:
        while (true) {
          jj_consume_token(CASE);
          t2 = jj_consume_token(CHAR);
          jj_consume_token(DOTS);
          b = EveryThing();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BREAK:
            jj_consume_token(BREAK);
            break;
          default:
            jj_la1[4] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CASE:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_3;
          }
        }
        ss=new ChechVal(t1.toString());
        str=new stringNode(t2.toString());
        s.addChild(ss);
        s.addChild(str);
        s.addChild(b);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          label_4:
          while (true) {
            jj_consume_token(CASE);
            t2 = jj_consume_token(DOUBLE);
            jj_consume_token(DOTS);
            b = EveryThing();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case BREAK:
              jj_consume_token(BREAK);
              break;
            default:
              jj_la1[6] = jj_gen;
              ;
            }
        v2=new constNode(t2.image);

        s.addChild(v2);
        s.addChild(b);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CASE:
              ;
              break;
            default:
              jj_la1[7] = jj_gen;
              break label_4;
            }
          }
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(C1);
    } catch (ParseException e) {
     error_skipto(C1);
    } finally {
      {if (true) return s;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ForNode ForSt() throws ParseException {
  ForNode f=new ForNode();
  assignNode a;
  ChechVal c;
  constNode cc;
  modificationNode m;
  stringNode ss;
  blockNode b=new blockNode();
  stNode s;
  Token t1,t2,t3;
    try {
      jj_consume_token(FOR);
      jj_consume_token(OPEN1);
      a = AssingSt();
      t1 = jj_consume_token(CHAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIG:
        t3 = jj_consume_token(BIG);
        break;
      case SMALL:
        t3 = jj_consume_token(SMALL);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = jj_consume_token(DOUBLE);
      jj_consume_token(END);
      m = IncSt1();
      jj_consume_token(C2);
      jj_consume_token(OPEN);
      b = EveryThing();
      jj_consume_token(C1);
        a.execute();
        c=new ChechVal(t1.toString());
        cc=new constNode(t2.image);

        ss=new stringNode(t3.toString());
        f.addChild(c);
        f.addChild(cc);
        f.addChild(b);
        f.addChild(ss);
    } catch (ParseException e) {
     error_skipto(C1);
    } finally {
     {if (true) return f;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public doWhileNode doWhileSt() throws ParseException {
  doWhileNode d=new doWhileNode();
  stNode s=new stNode();
  blockNode b=new blockNode();
  condWhile w;
    try {
      jj_consume_token(DO);
      jj_consume_token(OPEN);
      b = EveryThing();
      jj_consume_token(C1);
      jj_consume_token(OPEN1);
      jj_consume_token(WHILE);
      w = condW();
      jj_consume_token(C2);
      jj_consume_token(END);
    d.addChild(b);
        d.addChild(w);
    } catch (ParseException e) {
     error_skipto(END);
    } finally {
    {if (true) return d;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public WhileNode WhileSt() throws ParseException {
  WhileNode w=new WhileNode();
  condWhile c;
  stNode s;
  blockNode b=new blockNode();
    try {
      jj_consume_token(WHILE);
      c = condW();
      jj_consume_token(OPEN);
      b = EveryThing();
      jj_consume_token(C1);
        w.addChild(c);
        w.addChild(b);
    } catch (ParseException e) {
     error_skipto(C1);
    } finally {
     {if (true) return w;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public condWhile condW() throws ParseException {
condWhile c=new condWhile();
  constNode v2;

ChechVal v1,vv2;
stringNode v3;
Token t1,t2,t3;
    try {
      jj_consume_token(OPEN1);
      if (jj_2_3(3)) {
        t1 = jj_consume_token(CHAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTEQU:
          t3 = jj_consume_token(NOTEQU);
          break;
        case EQUEQU:
          t3 = jj_consume_token(EQUEQU);
          break;
        case BIG:
          t3 = jj_consume_token(BIG);
          break;
        case SMALL:
          t3 = jj_consume_token(SMALL);
          break;
        case SMALLEQU:
          t3 = jj_consume_token(SMALLEQU);
          break;
        case BIGEQU:
          t3 = jj_consume_token(BIGEQU);
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        t2 = jj_consume_token(DOUBLE);
   v1=new ChechVal(t1.toString());
   v2 = new constNode(t2.image);
   v3=new stringNode(t3.toString());
  c.addChild(v1);
  c.addChild(v2);
  c.addChild(v3);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHAR:
          t1 = jj_consume_token(CHAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NOTEQU:
            t3 = jj_consume_token(NOTEQU);
            break;
          case EQUEQU:
            t3 = jj_consume_token(EQUEQU);
            break;
          case BIG:
            t3 = jj_consume_token(BIG);
            break;
          case SMALL:
            t3 = jj_consume_token(SMALL);
            break;
          case SMALLEQU:
            t3 = jj_consume_token(SMALLEQU);
            break;
          case BIGEQU:
            t3 = jj_consume_token(BIGEQU);
            break;
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          t2 = jj_consume_token(CHAR);
   v1=new ChechVal(t1.toString());
   vv2 = new ChechVal(t2.toString());
   v3=new stringNode(t3.toString());
  c.addChild(v1);
  c.addChild(vv2);
  c.addChild(v3);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(C2);
    } catch (ParseException e) {
     error_skipto(C2);
    } finally {
    {if (true) return c;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ifNode IfSt() throws ParseException {
  ifNode a=new ifNode();
  condNode c;
  blockNode b=new blockNode();
  stNode s;
    try {
      jj_consume_token(IF);
      c = cond();
      jj_consume_token(OPEN);
      b = EveryThing();
      jj_consume_token(C1);
        a.addChild(c);
        a.addChild(b);
    } catch (ParseException e) {
     error_skipto(C1);
    } finally {
    {if (true) return a;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public condNode cond() throws ParseException {
condNode c = new condNode();
constNode v2;
ChechVal v1,vv2;
stringNode v3;
Token t1,t2,t3;
    try {
      jj_consume_token(OPEN1);
      if (jj_2_4(3)) {
        t1 = jj_consume_token(CHAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTEQU:
          t3 = jj_consume_token(NOTEQU);
          break;
        case EQUEQU:
          t3 = jj_consume_token(EQUEQU);
          break;
        case BIG:
          t3 = jj_consume_token(BIG);
          break;
        case SMALL:
          t3 = jj_consume_token(SMALL);
          break;
        case SMALLEQU:
          t3 = jj_consume_token(SMALLEQU);
          break;
        case BIGEQU:
          t3 = jj_consume_token(BIGEQU);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        t2 = jj_consume_token(DOUBLE);
   v1=new ChechVal(t1.toString());
   v2 = new constNode(t2.image);
   v3=new stringNode(t3.toString());
  c.addChild(v1);
  c.addChild(v2);
  c.addChild(v3);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHAR:
          t1 = jj_consume_token(CHAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NOTEQU:
            t3 = jj_consume_token(NOTEQU);
            break;
          case EQUEQU:
            t3 = jj_consume_token(EQUEQU);
            break;
          case BIG:
            t3 = jj_consume_token(BIG);
            break;
          case SMALL:
            t3 = jj_consume_token(SMALL);
            break;
          case SMALLEQU:
            t3 = jj_consume_token(SMALLEQU);
            break;
          case BIGEQU:
            t3 = jj_consume_token(BIGEQU);
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          t2 = jj_consume_token(CHAR);
   v1=new ChechVal(t1.toString());
   vv2 = new ChechVal(t2.toString());
   v3=new stringNode(t3.toString());
  c.addChild(v1);
  c.addChild(vv2);
  c.addChild(v3);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(C2);
    } catch (ParseException e) {
     error_skipto(C2);
    } finally {
    {if (true) return c;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public modificationNode IncSt() throws ParseException {
        modificationNode m=new modificationNode();
        assignNode aa;
        stringNode s1;
  stringNode s2;
  constNode con;
  Token t,t2,t3=null;
    try {
      t = jj_consume_token(CHAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
        t2 = jj_consume_token(35);
        break;
      case 36:
        t2 = jj_consume_token(36);
        break;
      case 37:
        t2 = jj_consume_token(37);
        t3 = jj_consume_token(DOUBLE);
        break;
      case 38:
        t2 = jj_consume_token(38);
        t3 = jj_consume_token(DOUBLE);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(END);
    s1=new stringNode(t.toString());
    s2=new stringNode(t2.toString());
    m.addChild(s1);
    m.addChild(s2);
if(t3 !=null){  con=new constNode(t3.image);m.addChild(con); }
    } catch (ParseException e) {
     error_skipto(END);
    } finally {
     {if (true) return m;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public modificationNode IncSt1() throws ParseException {
        modificationNode m=new modificationNode();
        assignNode aa;
  stringNode s1;
  stringNode s2;
  constNode con;
  Token t,t2,t3=null;
    t = jj_consume_token(CHAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 35:
      t2 = jj_consume_token(35);
      break;
    case 36:
      t2 = jj_consume_token(36);
      break;
    case 37:
      t2 = jj_consume_token(37);
      t3 = jj_consume_token(DOUBLE);
      break;
    case 38:
      t2 = jj_consume_token(38);
      t3 = jj_consume_token(DOUBLE);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    s1=new stringNode(t.toString());
    s2=new stringNode(t2.toString());
    m.addChild(s1);
    m.addChild(s2);
if(t3 !=null){  con=new constNode(t3.image);m.addChild(con); }
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public assignNode AssingSt() throws ParseException {
  assignNode a=new assignNode();
  stringNode s,s1,s3;
  constNode c;
  Token t1,t2,t3=null,t4=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        t1 = jj_consume_token(INT);
        t2 = jj_consume_token(CHAR);
        jj_consume_token(EQU);
        t3 = jj_consume_token(DOUBLE);
        jj_consume_token(END);
        s1=new stringNode(t1.toString());
        s=new stringNode(t2.toString());
        c=new constNode(t3.toString());
        a.addChild(s1);
        a.addChild(s);
        a.addChild(c);
        break;
      case STRING:
        t1 = jj_consume_token(STRING);
        t2 = jj_consume_token(CHAR);
        jj_consume_token(EQU);
        jj_consume_token(QUT);
        t4 = jj_consume_token(CHAR);
        jj_consume_token(QUT);
        jj_consume_token(END);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        s1=new stringNode(t1.toString());
        s=new stringNode(t2.toString());
        s3=new stringNode(t4.toString());
        a.addChild(s1);
        a.addChild(s);
        a.addChild(s3);
    } catch (ParseException e) {
     error_skipto(END);
    } finally {
     {if (true) return a;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public stNode print() throws ParseException {
  stNode s=new stNode();
  ChechVal c;
  Print st;
  Token t,t2;
  stringNode ww;
  String q="";
    try {
      jj_consume_token(CW);
      jj_consume_token(OPEN1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAR:
        t = jj_consume_token(CHAR);
        jj_consume_token(C2);
 c=new ChechVal(t.toString());
        s.addChild(c);
        break;
      case QUT:
        jj_consume_token(QUT);
        label_5:
        while (true) {
          t = jj_consume_token(CHAR);
                       st=new Print(t.toString());  q+=t.toString()+" ";
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CHAR:
            ;
            break;
          default:
            jj_la1[19] = jj_gen;
            break label_5;
          }
        }
        jj_consume_token(QUT);
        jj_consume_token(C2);
                                                                                         ww=new stringNode(q); s.addChild(ww);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(END);
    } catch (ParseException e) {
     error_skipto(END);
    } finally {
{if (true) return s;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public stringNode StringSt() throws ParseException {
  stringNode s;
  Token t;
    t = jj_consume_token(CHAR);
               s=new stringNode(t.toString());
                                                  {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(QUT)) return true;
    Token xsp;
    if (jj_3R_34()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(QUT)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(CHAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    }
    }
    }
    }
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(CHAR)) return true;
    if (jj_scan_token(EQU)) return true;
    if (jj_scan_token(DOUBLE)) return true;
    if (jj_scan_token(END)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(CHAR)) return true;
    if (jj_scan_token(C2)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(CW)) return true;
    if (jj_scan_token(OPEN1)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    if (jj_scan_token(END)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(CHAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    }
    }
    }
    }
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(CHAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    }
    if (jj_scan_token(END)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(OPEN1)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(38)) return true;
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(CHAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    }
    }
    }
    }
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    if (jj_3_1()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(OPEN1)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    Token xsp;
    if (jj_3R_14()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(CASE)) return true;
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(OPEN1)) return true;
    if (jj_scan_token(CHAR)) return true;
    if (jj_scan_token(C2)) return true;
    if (jj_scan_token(OPEN)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(CHAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    }
    }
    }
    }
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(STRING)) return true;
    if (jj_scan_token(CHAR)) return true;
    if (jj_scan_token(EQU)) return true;
    if (jj_scan_token(QUT)) return true;
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(OPEN1)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(OPEN)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public testTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x9000000,0x0,0x9000000,0x9401e02,0x80,0x100,0x80,0x100,0x100,0x220000,0x423a000,0x423a000,0x0,0x423a000,0x423a000,0x0,0x0,0x0,0x9000000,0x0,0x800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x4,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x2,0x78,0x78,0x0,0x2,0x2,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public test(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public test(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new testTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public test(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new testTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public test(testTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(testTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
